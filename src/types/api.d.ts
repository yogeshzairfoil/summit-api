/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/events/{eventId}/streams': {
    /** @description Gets a list of an event streams */
    get: operations['getEventStreams'];
  };
  '/events/{eventId}/streams/add': {
    /** @description Creates an event stream */
    post: operations['addEventStream'];
  };
  '/events/{eventId}/streams/{streamId}/update': {
    /** @description Updates an event stream */
    put: operations['updateEventStream'];
  };
  '/events/{eventId}/streams/{streamId}/delete': {
    /** @description Deletes an event stream */
    delete: operations['deleteEventStream'];
  };
  '/checkout/{paymentId}': {
    /** @description Get checkout details from payment ID */
    get: operations['getCheckout'];
  };
  '/checkout/event/{eventId}': {
    /** @description Get all checkout details from a given event ID */
    get: operations['getEventCheckouts'];
  };
  '/checkout/user/{userId}': {
    /** @description Get all checkout details from a given user ID */
    get: operations['getUserCheckouts'];
  };
  '/events/{eventId}/payments/abandons': {
    /** @description Get list of abandoned payments */
    get: operations['getEventPaymentsAbandons'];
  };
  '/events/{eventId}/rooms': {
    /** @description Gets a list of an event rooms */
    get: operations['getEventRooms'];
  };
  '/events/{eventId}/rooms/add': {
    /** @description Create an event room */
    post: operations['addEventRoom'];
  };
  '/events/{eventId}/rooms/{roomId}/update': {
    /** @description Update an event room */
    put: operations['updateEventRoom'];
  };
  '/events/{eventId}/sessions': {
    /** @description Get list of an event sessions */
    get: operations['getEventSessions'];
  };
  '/events/{eventId}/sessions/agenda_data': {
    /** @description Get the agenda data for the event's sessions */
    get: operations['getEventSessionsAgendaData'];
  };
  '/events/{eventId}/sessions/{sessionId}/attendees': {
    /** @description Get list of session checked attendees */
    get: operations['GET_attendees'];
  };
  '/events/{eventId}/sessions/{sessionId}/speakers': {
    /** @description Get list of an speakers sessions */
    get: operations['getEventSpeakersSessions'];
  };
  '/events/{eventId}/sessions/{sessionId}/sponsors': {
    /** @description Get list of an sponsors sessions */
    get: operations['getEventSponsorsSessions'];
  };
  '/events/{eventId}/sessions/add': {
    /** @description Create an event session */
    post: operations['addEventSession'];
  };
  '/events/{eventId}/sessions/{sessionId}/update': {
    /** @description Update an event session */
    put: operations['updateEventSession'];
  };
  '/events/{eventId}/sessions/{sessionId}/delete': {
    /** @description Delete an event session */
    delete: operations['deleteEventSession'];
  };
  '/users': {
    /** @description Get user list data */
    get: operations['getUsers'];
  };
  '/users/login': {
    /** @description Log in as a user */
    post: operations['login'];
  };
  '/users/reset_password': {
    /** @description Requests a new password */
    post: operations['reset_password'];
  };
  '/users/{userId}': {
    /** @description Get user data */
    get: operations['getUserById'];
  };
  '/users/{userId}/update_profile': {
    /** @description Update a user's profile. */
    put: operations['updateUserProfile'];
  };
  '/users/login_methods': {
    /** @description Get a list of available login methods. */
    get: operations['getLoginMethods'];
  };
  '/users/otp_request': {
    /** @description Send an email to the given user with an OTP code */
    post: operations['postOtpRequest'];
  };
  '/users/consume_otp': {
    /** @description Consume the given OTP code for the given user */
    post: operations['consume_otp'];
  };
  '/users/login_otp': {
    /** @description Log in as a user for a specific client */
    post: operations['login_otp'];
  };
  '/events/{eventId}/sponsors/categories': {
    /** @description Get list of an event sponsors categories */
    get: operations['getEventSponsorsCategories'];
  };
  '/events/{eventId}/sponsors/categories/add': {
    /** @description Adds a sponsor category to an event */
    post: operations['addEventSponsorCategory'];
  };
  '/events/{eventId}/sponsors/categories/{sponsorCategoryId}/update': {
    /** @description Updates a sponsor category data */
    put: operations['updateEventSponsorCategory'];
  };
  '/events/{eventId}/sponsors/categories/{sponsorCategoryId}/delete': {
    /** @description Deletes a sponsor category data */
    delete: operations['deleteEventSponsorCategory'];
  };
  '/events/{eventId}/sponsors': {
    /** @description Get list of an event sponsors */
    get: operations['getEventSponsors'];
  };
  '/events/{eventId}/sponsors/add': {
    /** @description Adds a sponsor to an event */
    post: operations['addEventSponsor'];
  };
  '/events/{eventId}/sponsors/{sponsorId}/update': {
    /** @description Updates a sponsor data */
    put: operations['updateEventSponsor'];
  };
  '/events/{eventId}/sponsors/{sponsorId}/delete': {
    /** @description Deletes a sponsor data */
    delete: operations['deleteEventSponsor'];
  };
  '/events/{eventId}/attendees': {
    /** @description Get list of an event attendees */
    get: operations['getEventAttendees'];
    /** @description Create an attendee */
    post: operations['createEventAttendee'];
  };
  '/events/{eventId}/attendees/{attendeeId}': {
    /** @description Get an attendee */
    get: operations['getEventAttendee'];
    /** @description Update an attendee */
    put: operations['updateEventAttendee'];
  };
  '/events/{eventId}/attendees/{attendeeId}/exhibitors_visited': {
    /** @description Gets a list of exhibitors visited by an attendee */
    get: operations['getExhibitorsVisited'];
  };
  '/events/{eventId}/attendees/{attendeeId}/visit_exhibitor/{exhibitorId}': {
    /** @description Sets an exhibitor as visited by an attendee. */
    post: operations['setExhibitorAsVisited'];
  };
  '/events/{eventId}/attendees/{attendeeId}/unvisit_exhibitor/{exhibitorId}': {
    /** @description Sets an exhibitor as not visited by an attendee. If the user data was registered in the exhibitor's lead list, it will be removed too */
    post: operations['setExhibitorAsNotVisited'];
  };
  '/events/{eventId}/attendees/classification': {
    /** @description Get game classification list of attendees. Only those attendees who participated in the game will be shown */
    get: operations['getEventAttendeesClassification'];
  };
  '/events/{eventId}/attendees/{attendeeId}/classification': {
    /** @description Get game classification data of attendee. If an attendee doesn't exist or has not participated in the game, a 404 error will be thrown */
    get: operations['getEventAttendeeClassification'];
  };
  '/events/{eventId}/attendees/find': {
    /** @description Search for event attendees by text or QR code */
    get: operations['getEventAttendeeByTextOrQR'];
  };
  '/events/{eventId}/exhibitors': {
    /** @description Gets a list of an event exhibitors */
    get: operations['getEventExhibitors'];
    /** @description Adds an event exhibitor */
    post: operations['addEventExhibitor'];
  };
  '/events/{eventId}/exhibitors/{exhibitorId}': {
    /** @description Gets an event exhibitor */
    get: operations['getEventExhibitor'];
    /** @description Updates an event exhibitor */
    put: operations['updateEventExhibitor'];
    /** @description Deletes an event exhibitor */
    delete: operations['deleteEventExhibitor'];
  };
  '/events/{eventId}/exhibitors/{exhibitorId}/publish': {
    /** @description Publishes an event exhibitor */
    put: operations['publishEventExhibitor'];
  };
  '/events/{eventId}/exhibitors/{exhibitorId}/unpublish': {
    /** @description Unpublishes an event exhibitor */
    put: operations['unpublishEventExhibitor'];
  };
  '/events/{eventId}/exhibitors/types': {
    /** @description Gets a list of an event exhibitor types */
    get: operations['getEventExhibitorTypes'];
    /** @description Adds an event exhibitor type */
    post: operations['addEventExhibitorType'];
  };
  '/events/{eventId}/exhibitors/types/{exhibitorTypeId}': {
    /** @description Gets an event exhibitor type */
    get: operations['getEventExhibitorType'];
    /** @description Updates an event exhibitor type */
    put: operations['updateEventExhibitorType'];
    /** @description Deletes an event exhibitor type */
    delete: operations['deleteEventExhibitorTypes'];
  };
  '/videocalls/{uuid}': {
    /** @description Get a video call with vonage data */
    get: operations['getVideoCallByUuid'];
  };
  '/events': {
    /** @description Get list of events */
    get: operations['getEvents'];
  };
  '/events/categories': {
    /** @description Get list of event categories */
    get: operations['getEventCategories'];
  };
  '/events/configuration': {
    /** @description Get events list with matchmaking and registered form by AccessToken user */
    get: operations['getEventsConfiguration'];
  };
  '/events/{eventId}/questions_filters': {
    /** @description Gets a list of questions filters */
    get: operations['getQuestionFilters'];
  };
  '/events/{eventId}/questions_filters_responses': {
    /** @description Gets responses to the filter questions from users attending the event */
    get: operations['getQuestionFiltersResponses'];
  };
  '/events/{eventId}/speakers': {
    /** @description Get list of an event speakers */
    get: operations['getEventSpeakers'];
  };
  '/events/{event_id}/speakers/{speaker_id}/sessions': {
    /** @description Get list of a speakers's sessions */
    get: operations['GET_sessions'];
  };
  '/events/{eventId}/speakers/add': {
    /** @description Adds a speaker to an event */
    post: operations['addEventSpeaker'];
  };
  '/events/{eventId}/speakers/{speakerId}/update': {
    /** @description Update a speaker data */
    put: operations['updateEventSpeaker'];
  };
  '/events/{eventId}/speakers/{speakerId}/delete': {
    /** @description Delete a speaker */
    delete: operations['deleteEventSpeaker'];
  };
  '/oauth/token': {
    /** @description Get OAuth access token */
    post: operations['getOAuthAccessTokens'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "status": false,
     *   "code": 403,
     *   "msg": "You don't have permissions to access this resource"
     * }
     */
    ApiError: {
      /** @default false */
      status?: boolean;
      msg?: string;
      code?: number;
    };
    /**
     * @example {
     *   "id": 1,
     *   "name": "Stream name",
     *   "color": "#AABBCC",
     *   "language": "EN",
     *   "event_id": 1,
     *   "order": 5
     * }
     */
    Stream: {
      /** Format: int23 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      name?: string;
      color?: string;
      language?: string;
      /** Format: int32 */
      order?: number;
    };
    StreamList: components['schemas']['Stream'][];
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Green",
     *   "color": "#00FF00",
     *   "completed": 1
     * }
     */
    translatableStreamTranslation: {
      language?: string;
      name?: string;
      color?: string;
      completed?: boolean;
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "order": 1,
     *   "translations": {
     *     "EN": {
     *       "language": "EN",
     *       "name": "Green",
     *       "color": "#00FF00",
     *       "completed": 1
     *     },
     *     "ES": {
     *       "language": "ES",
     *       "name": "Verde",
     *       "color": "#00FF00",
     *       "completed": 1
     *     }
     *   }
     * }
     */
    translatableStream: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      order?: number;
      translations?: {
        '{language}'?: components['schemas']['translatableStreamTranslation'];
      };
    };
    ApiError_Checkout_404: components['schemas']['ApiError'] & Record<string, never>;
    CheckoutDiscountMetafields: {
      external_id?: string;
    };
    CheckoutDiscount: {
      /** Format: int32 */
      id?: number;
      code?: string | null;
      metafields?: components['schemas']['CheckoutDiscountMetafields'];
    } | null;
    CheckoutTicketMetafields: {
      external_id?: string;
    };
    CheckoutTicket: {
      id?: number;
      name?: string;
      description?: string;
      /** Format: float */
      original_price?: number;
      /** Format: float */
      sale_price?: number;
      discount?: null | components['schemas']['CheckoutDiscount'];
      allocated_sessions?: number;
      metafields?: components['schemas']['CheckoutTicketMetafields'];
    };
    CheckoutUtmRecord: {
      parameter?: string;
      content?: string;
    };
    CheckoutUtmCollection: components['schemas']['CheckoutUtmRecord'][];
    CheckoutFormResponse: {
      question_id?: number;
      global_question_id?: number | null;
      response?: string;
      internal_id?: string;
    };
    CheckoutFormResponses: components['schemas']['CheckoutFormResponse'][] | null;
    CheckoutSessionMetafields: {
      external_id?: string;
    };
    CheckoutSession: {
      id?: number;
      name?: string;
      description?: string;
      metafields?: components['schemas']['CheckoutSessionMetafields'];
    };
    CheckoutSessions: components['schemas']['CheckoutSession'][];
    CheckoutAttendee: {
      id?: number;
      user_id?: number | null;
      email?: string | null;
      first_name?: string | null;
      last_name?: string | null;
      job_title?: string | null;
      company?: string | null;
      lead_booker?: boolean;
      form_answers?: components['schemas']['CheckoutFormResponses'];
      utm_data?: components['schemas']['CheckoutUtmCollection'];
      ticket_selected?: components['schemas']['CheckoutTicket'];
      selected_sessions?: components['schemas']['CheckoutSessions'];
    };
    CheckoutAttendees: components['schemas']['CheckoutAttendee'][];
    CheckoutUser: {
      id?: number;
      email?: string;
      first_name?: string | null;
      last_name?: string | null;
      job_title?: string | null;
      company?: string | null;
    };
    CheckoutTransaction: {
      /** Format: float */
      total_paid_price?: number;
      /** Format: float */
      vat_amount?: number;
      vat_country?: string | null;
      vat_id?: string | null;
      currency?: string | null;
      timestamp_utc?: number;
      payment_method?: string | null;
      /** @description Only present for payment_method="stripe" */
      stripe_transaction_id?: string;
      status?: string;
      retry_id?: number | null;
      buyer_user?: components['schemas']['CheckoutUser'];
    };
    CheckoutEventMetafields: {
      external_id?: string;
    };
    CheckoutEvent: {
      id?: number;
      name?: string;
      description?: string;
      metafields?: components['schemas']['CheckoutEventMetafields'];
    };
    /**
     * @example {
     *   "event": {
     *     "id": 66666,
     *     "name": "My event",
     *     "description": "Best event ever",
     *     "metafields": {
     *       "external_id": "e6"
     *     }
     *   },
     *   "transaction_details": {
     *     "id": 777777,
     *     "total_paid_price": 36.36,
     *     "vat_amount": 6.06,
     *     "vat_country": "United States",
     *     "vat_id": "12345678A",
     *     "currency": "USD",
     *     "timestamp_utc": 1510085963,
     *     "payment_method": "stripe",
     *     "status": "paid",
     *     "stripe_transaction_id": "ch_14StdfHc6Sbm1ukEA2R1KFar",
     *     "retry_id": 999999,
     *     "buyer_user": {
     *       "id": 88888,
     *       "email": "steve.ballmer@microsoft.com",
     *       "first_name": "Steve",
     *       "last_name": "Ballmer",
     *       "job_title": "Owner",
     *       "company": "Los Angeles Clippers"
     *     }
     *   },
     *   "attendees": [
     *     {
     *       "id": 44444,
     *       "user_id": 55555,
     *       "email": "satya.nadela@microsoft.com",
     *       "first_name": "Satya",
     *       "last_name": "Nadela",
     *       "job_title": "CEO",
     *       "company": "Microsoft Corporation",
     *       "lead_booker": true,
     *       "form_answers": [
     *         {
     *           "question_id": 3333,
     *           "global_question_id": null,
     *           "response": "Yes, please",
     *           "internal_id": "my_question"
     *         }
     *       ],
     *       "utm_data": [
     *         {
     *           "parameter": "utm_source",
     *           "content": "eventscase"
     *         }
     *       ],
     *       "ticket_selected": {
     *         "id": 22222,
     *         "name": "Early Bird",
     *         "description": "Regular ticket at reduced price for first buyers",
     *         "original_price": 40.4,
     *         "sale_price": 30.3,
     *         "discount": {
     *           "id": 1111,
     *           "code": "25OFF",
     *           "metafields": {
     *             "external_id": "d1"
     *           }
     *         },
     *         "allocated_sessions": 3,
     *         "metafields": {
     *           "external_id": "t2"
     *         }
     *       },
     *       "selected_sessions": [
     *         {
     *           "id": 888888,
     *           "name": "Networking",
     *           "description": "Meet people while having some beers",
     *           "metafields": {
     *             "external_id": "s8"
     *           }
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    Checkout: {
      event?: components['schemas']['CheckoutEvent'];
      transaction_details?: components['schemas']['CheckoutTransaction'];
      attendees?: components['schemas']['CheckoutAttendees'];
    };
    CheckoutList: components['schemas']['Checkout'][];
    ApiError_Payments403: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "order_id": "60040",
     *   "created_at": "2019-07-20T10:27:32Z",
     *   "updated_at": "2019-07-20T11:57:33Z",
     *   "amount": "0.00",
     *   "method": "in_process",
     *   "status": "expired",
     *   "tickets": "2",
     *   "addons": "0",
     *   "user_id": "253983",
     *   "email": "hello@eventscase.com",
     *   "first_name": "EventsCase",
     *   "last_name": "Admin",
     *   "company": "EventsCase",
     *   "role": "Admin"
     * }
     */
    AbandonedPayment: {
      /** Format: int32 */
      order_id?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: float */
      amount?: number;
      method?: string;
      status?: string;
      /** Format: int32 */
      tickets?: number;
      /** Format: int32 */
      addons?: number;
      /** Format: int32 */
      user_id?: number;
      /** Format: email */
      email?: string;
      first_name?: string;
      last_name?: string;
      company?: string;
      role?: string;
    };
    AbandonedPaymentsList: {
      data?: components['schemas']['AbandonedPayment'][];
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "name": "Room name"
     * }
     */
    Room: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      name?: string;
    };
    RoomList: components['schemas']['Room'][];
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Room one"
     * }
     */
    RoomTranslationForUpdate: {
      language?: string;
      name?: string;
    };
    /**
     * @example {
     *   "id": 10,
     *   "event_id": 1,
     *   "translations": [
     *     {
     *       "language": "EN",
     *       "name": "Room one"
     *     },
     *     {
     *       "language": "ES",
     *       "name": "Sala uno"
     *     }
     *   ]
     * }
     */
    RoomForAddOrUpdate: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      translations?: components['schemas']['RoomTranslationForUpdate'][];
    };
    ApiError_Sessions403: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "title": "How the Technology Affects Our Life",
     *   "description": "Long description of the session...",
     *   "short_description": "",
     *   "date": "2020-08-02",
     *   "opening": "11:30",
     *   "closing": "13:00",
     *   "online_session": true,
     *   "session_image": "http://eventscase.loc/img/EventsCase/logo_white.png",
     *   "is_registrable": false,
     *   "register_capacity": 0,
     *   "user_registered": true
     * }
     */
    Session: {
      /** Format: int32 */
      id: number;
      title: string;
      description: string;
      short_description: string;
      /** Format: date */
      date: string;
      /** Format: time */
      opening: string;
      /** Format: time */
      closing: string;
      online_session?: Record<string, never>;
      session_image?: string;
      is_registrable?: Record<string, never>;
      register_capacity?: Record<string, never>;
      user_registered?: Record<string, never>;
    };
    SessionsList: {
      data?: components['schemas']['Session'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "day": 1601424000
     * }
     */
    AgendaDay: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      day?: number;
    };
    SessionsAgendaData: {
      days?: components['schemas']['AgendaDay'][];
      rooms?: components['schemas']['Room'][];
      streams?: components['schemas']['Stream'][];
    };
    /**
     * @example {
     *   "language": "EN",
     *   "title": "Session title",
     *   "short_description": "Short description of the session...",
     *   "description": "Long description of the session..."
     * }
     */
    translatableSessionTranslation: {
      language?: string;
      title?: string;
      short_description?: string;
      description?: string;
      completed?: boolean;
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "color": "#10CF45",
     *   "opening": "2019-05-20T11:00:00+00:00",
     *   "closing": "2019-05-20T12:30:00+00:00",
     *   "order": 1,
     *   "room_id": 2,
     *   "stream_id": 3,
     *   "online_session": true,
     *   "session_image": "http://eventscase.loc/img/EventsCase/logo_white.png",
     *   "translations": {
     *     "EN": {
     *       "language": "EN",
     *       "title": "Session title",
     *       "short_description": "Short description of the session...",
     *       "description": "Long description of the session...",
     *       "completed": 1
     *     },
     *     "ES": {
     *       "language": "ES",
     *       "title": "Título de la sesión",
     *       "short_description": "Descripción corta de la sesión...",
     *       "description": "Descripción larga de la sesión...",
     *       "completed": 1
     *     }
     *   },
     *   "register_per_session": true,
     *   "max_attendees": 20
     * }
     */
    translatableSession: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      color?: string;
      /** Format: date-time */
      opening?: string;
      /** Format: date-time */
      closing?: string;
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      room_id?: number;
      /** Format: int32 */
      stream_id?: number;
      online_session?: Record<string, never>;
      session_image?: string;
      translations?: components['schemas']['translatableSessionTranslation'][];
      register_per_session?: Record<string, never>;
      /** Format: int32 */
      max_attendees?: number;
    };
    /**
     * @example {
     *   "id": 650,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "email": "jane.doe@eventscase.com",
     *   "user_id": 428,
     *   "guest_of": 427,
     *   "ticket_id": 6,
     *   "payment_id": 641,
     *   "confirmed": 0,
     *   "category_id": 0,
     *   "qr_code": "{\"id\":\"650\",\"signature\":\"UhjmXfeb8mKpdBDwdP_nRo_uaQU:\"}",
     *   "motto": null,
     *   "long_bio": "",
     *   "photo_url": "",
     *   "linkedin_url": "",
     *   "twitter_user": null,
     *   "facebook_url": null,
     *   "site_url": "",
     *   "public_account": 1
     * }
     */
    sessionAttendee: {
      /** Format: int32 */
      id?: number;
      email?: string;
      first_name?: string;
      last_name?: string;
      company?: string | null;
      role?: string | null;
      /** Format: int32 */
      user_id?: number;
      /** Format: int32 */
      guest_of?: number;
      /** Format: int32 */
      ticket_id?: number;
      /** Format: int32 */
      payment_id?: number;
      /** Format: int32 */
      confirmed?: number;
      /** Format: int32 */
      category_id?: number;
      qr_code?: string | null;
      motto?: string | null;
      long_bio?: string | null;
      photo_url?: string | null;
      linkedin_url?: string | null;
      twitter_user?: string | null;
      facebook_url?: string | null;
      site_url?: string | null;
      /** Format: int32 */
      public_account?: number;
    };
    sessionAttendeeList: components['schemas']['sessionAttendee'][];
    /**
     * @example {
     *   "id": 1,
     *   "order": 1,
     *   "speaker_id": 4,
     *   "session_id": 1
     * }
     */
    sessionSpeaker: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      speaker_id?: number;
      /** Format: int32 */
      session_id?: number;
    };
    sessionSpeakerList: components['schemas']['sessionSpeaker'][];
    /**
     * @example {
     *   "id": 1,
     *   "speaker_id": 7,
     *   "session_id": 1
     * }
     */
    sessionSponsor: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      speaker_id?: number;
      /** Format: int32 */
      session_id?: number;
    };
    sessionSponsorList: components['schemas']['sessionSponsor'][];
    ApiError_Users404: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Users400: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_UsersResetPassword400: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Users401: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "email": "jane.doe@eventscase.com",
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "motto": "This is my motto",
     *   "long_bio": "Long description of my bio...",
     *   "phone": "+1 234567890",
     *   "user_alias": "jane_doe_eventscase",
     *   "client_id": "36",
     *   "master_user_id": null,
     *   "created_on": "1571388268",
     *   "last_login": "1579863347",
     *   "verified_at": "1559863347",
     *   "password_updated_at": "2019-12-11 12:55:50",
     *   "facebook_url": "http://www.myfacebook.com",
     *   "linkedin_url": "http://www.mylinkedin.com",
     *   "twitter_user": "http://www.mytwitter.com",
     *   "photo_url": "/img/user.png",
     *   "site_url": "http://www.eventscase.com",
     *   "latitude": "37.5415",
     *   "longitude": "-5.08267",
     *   "moderate": "1",
     *   "last_selected_language": "EN",
     *   "public_account": "1",
     *   "active": "1",
     *   "saml_enabled": "0"
     * }
     */
    User: {
      /** Format: int32 */
      id: number;
      /** Format: email */
      email: string;
      first_name: string;
      last_name: string;
      company?: string;
      role?: string | null;
      motto?: string | null;
      long_bio?: string | null;
      phone?: string | null;
      user_alias?: string | null;
      /** Format: int8 */
      client_id?: string | null;
      /** Format: int8 */
      master_user_id?: number | null;
      /** Format: timestamp */
      created_on?: string;
      /** Format: timestamp */
      last_login?: string | null;
      /** Format: timestamp */
      verified_at?: string | null;
      /** Format: date-time */
      password_updated_at?: string;
      facebook_url?: string | null;
      linkedin_url?: string | null;
      twitter_user?: string | null;
      photo_url?: string | null;
      site_url?: string | null;
      /** Format: float */
      latitude?: string | null;
      /** Format: float */
      longitude?: string | null;
      /** Format: int4 */
      moderate?: string;
      last_selected_language?: string | null;
      /** Format: int2 */
      public_account?: string;
      /** Format: int2 */
      active?: string;
      /** Format: int2 */
      saml_enabled?: string;
    };
    /**
     * @example {
     *   "question_id": "1",
     *   "question_type": "text",
     *   "survey_instance": "2",
     *   "global_question_id": "",
     *   "response": "My response",
     *   "internal_id": "",
     *   "response_option_id": null
     * }
     */
    UserSurveyQuestionResponse: {
      question_id: string;
      question_type: string;
      instance_id: string;
      global_question_id: string | null;
      response: string;
      internal_id: string;
      response_option_id: number | null;
    };
    UserWithSurvey: components['schemas']['User'] & {
      survey?: components['schemas']['UserSurveyQuestionResponse'][];
    };
    UserWithToken: {
      user?: components['schemas']['User'];
      /** @example 53cf6b95b910336613b2a8ba0511cd34f5b76c62 */
      refresh_token?: string;
      /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.... */
      firebase_token?: string;
      /** @example 6b95b692-09de-028c-362b-f2e2decc3df5 */
      client_uuid?: string;
    };
    ApiError_Sponsors403: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_SponsorCategories403: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "title": "EventsCase",
     *   "image": "https://cdn.eventscase.com/eventscase.com/uploads/users/159/uploads/5ba9f49f16f7d.png",
     *   "link": "https://eventscase.com",
     *   "description": "Long description of the sponsor...",
     *   "category_id": 1,
     *   "facebook_url": null,
     *   "youtube_url": null,
     *   "instagram_url": null,
     *   "twitter_url": null,
     *   "linkedin_url": null,
     *   "priority": 0
     * }
     */
    Sponsor: {
      /** Format: int32 */
      id: number;
      title: string;
      /** Format: uri */
      image: string;
      /** Format: uri */
      link: string;
      description: string;
      /** Format: int32 */
      category_id: number | null;
      /** Format: uri */
      facebook_url?: string | null;
      /** Format: uri */
      youtube_url?: string | null;
      /** Format: uri */
      instagram_url?: string | null;
      /** Format: uri */
      twitter_url?: string | null;
      /** Format: uri */
      linkedin_url?: string | null;
      /** Format: int32 */
      priority?: number;
    };
    SponsorsList: {
      data?: components['schemas']['Sponsor'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "name": "My category",
     *   "order": 0
     * }
     */
    SponsorsCategory: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      event_id: number;
      name: string;
      /** Format: int32 */
      order: number;
    };
    /**
     * @example {
     *   "language": "EN",
     *   "name": "First sponsor category",
     *   "completed": true
     * }
     */
    translatableSponsorCategoryTranslation: {
      language?: string;
      name?: string;
      completed?: boolean;
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "order": 1,
     *   "translations": {
     *     "EN": {
     *       "language": "EN",
     *       "name": "First sponsor category",
     *       "completed": true
     *     },
     *     "ES": {
     *       "language": "ES",
     *       "name": "Primera categoria de sponsor",
     *       "completed": true
     *     }
     *   }
     * }
     */
    translatableSponsorCategory: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      order?: number;
      translations?: {
        '{language}'?: components['schemas']['translatableSponsorCategoryTranslation'];
      };
    };
    /**
     * @example {
     *   "language": "EN",
     *   "description": "A sponsor description...",
     *   "completed": true
     * }
     */
    translatableSponsorTranslation: {
      language?: string;
      description?: string;
      completed?: boolean;
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "title": "EventsCase",
     *   "image": "https://cdn.eventscase.com/eventscase.com/uploads/users/159/uploads/5ba9f49f16f7d.png",
     *   "link": "https://eventscase.com",
     *   "priority": 1,
     *   "category_id": 1,
     *   "translations": {
     *     "EN": {
     *       "language": "EN",
     *       "description": "Long description of the sponsor...",
     *       "completed": true
     *     },
     *     "ES": {
     *       "language": "ES",
     *       "description": "Descripcion larga del sponsor...",
     *       "completed": true
     *     }
     *   }
     * }
     */
    translatableSponsor: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      title?: string;
      /** Format: uri */
      image?: string;
      /** Format: uri */
      link?: string;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      category_id?: number | null;
      translations?: {
        '{language}'?: components['schemas']['translatableSponsorTranslation'];
      };
    };
    ApiError_Attendees400: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Attendees403: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Attendees404: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Attendees409: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Attendees422: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "user_id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "email": "jane.doe@eventscase.com",
     *   "motto": "This is my motto",
     *   "long_bio": "Long description of my bio...",
     *   "eo_notes": "Event Organiser notes...",
     *   "linkedin_url": "",
     *   "twitter_user": "",
     *   "facebook_url": "",
     *   "site_url": ""
     * }
     */
    Attendee: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      user_id: number;
      first_name: string;
      last_name: string;
      company: string;
      role: string;
      /** Format: email */
      email: string;
      motto: string;
      long_bio: string;
      eo_notes: string;
      linkedin_url?: string | null;
      twitter_user?: string | null;
      facebook_url?: string | null;
      site_url?: string | null;
    };
    AttendeesList: {
      data?: components['schemas']['Attendee'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    /**
     * @example {
     *   "id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "photo_url": "https://cdn.eventscase.com/photo.jpg",
     *   "points": 200,
     *   "rank": 2
     * }
     */
    AttendeeClassification: {
      /** Format: int32 */
      id: number;
      first_name: string;
      last_name: string;
      photo_url: string;
      /** Format: int32 */
      points: number;
      /** Format: int32 */
      rank: number;
    };
    /**
     * @example {
     *   "id": 1,
     *   "user_id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "email": "jane.doe@eventscase.com",
     *   "eo_notes": "Event Organiser notes...",
     *   "photo_url": "/img/user2.png",
     *   "confirmed": 0,
     *   "sessions": [
     *     32441,
     *     33535
     *   ]
     * }
     */
    AttendeeFind: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      user_id: number;
      first_name: string;
      last_name: string;
      company: string | null;
      role: string | null;
      email: string;
      eo_notes: string | null;
      photo_url: string | null;
      /** Format: int32 */
      confirmed: number;
      sessions: number[];
    };
    /**
     * @example {
     *   "in": 3,
     *   "out": 1,
     *   "pending": 7
     * }
     */
    AttendeeFindStatus: {
      /** Format: int32 */
      in: number;
      /** Format: int32 */
      out: number;
      /** Format: int32 */
      pending: number;
    };
    /**
     * @example {
     *   "id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "photo_url": "https://cdn.eventscase.com/photo.jpg",
     *   "points": 200
     * }
     */
    AttendeesClassification: {
      /** Format: int32 */
      id: number;
      first_name: string;
      last_name: string;
      photo_url: string;
      /** Format: int32 */
      points: number;
    };
    AttendeeClassificationList: components['schemas']['AttendeeClassification'][];
    AttendeesFindArray: {
      attendees?: components['schemas']['AttendeeFind'][];
      status?: components['schemas']['AttendeeFindStatus'];
    };
    AttendeesClassificationList: components['schemas']['AttendeesClassification'][];
    ApiError_ExhibitorsVisited400: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_ExhibitorsVisited403: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_ExhibitorsVisited404: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "exhibitor_id": 3,
     *   "attendee_id": 5,
     *   "visited_at": "2020-02-10T12:30:00+00:00"
     * }
     */
    ExhibitorVisited: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      exhibitor_id?: number;
      /** Format: int32 */
      attendee_id?: number;
      /** Format: datetime */
      visited_at?: string;
    };
    ExhibitorsVisitedList: components['schemas']['ExhibitorVisited'][];
    ApiError_Session404: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "user_id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "email": "jane.doe@eventscase.com",
     *   "guest_of": null,
     *   "ticket_id": null,
     *   "payment_id": null,
     *   "confirmed": 1,
     *   "qr_code": "6E6UtcZ3pA7XY4J_J-mDyPr3SF4:",
     *   "motto": "This is my motto",
     *   "long_bio": "Long description of my bio...",
     *   "photo_url": "",
     *   "linkedin_url": "",
     *   "twitter_user": "",
     *   "facebook_url": "",
     *   "site_url": "",
     *   "public_account": 1
     * }
     */
    attendeeReturned: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      user_id?: number;
      first_name?: string;
      last_name?: string;
      company?: string;
      role?: string;
      /** Format: email */
      email?: string;
      /** Format: int32 */
      guest_of?: number | null;
      /** Format: int32 */
      ticket_id?: number | null;
      /** Format: int32 */
      payment_id?: number | null;
      /** Format: int32 */
      confirmed?: number;
      /** Format: int32 */
      category_id?: number | null;
      qr_code?: string;
      motto?: string | null;
      long_bio?: string | null;
      /** Format: uri */
      photo_url?: string;
      /** Format: uri */
      linkedin_url?: string;
      /** Format: uri */
      twitter_user?: string;
      /** Format: uri */
      facebook_url?: string;
      /** Format: uri */
      site_url?: string;
      /** Format: int32 */
      public_account?: number;
    };
    attendeeListReturned: {
      data?: components['schemas']['attendeeReturned'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    ApiError_Exhibitors403: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "email": "adam@domain.com",
     *   "user_id": 45,
     *   "attendee_id": 456,
     *   "status": "confirmed",
     *   "photo_url": "https://eventscase.com/img/user.png",
     *   "first_name": "Adam",
     *   "last_name": "Ant",
     *   "company": "Eventscase",
     *   "role": "Developer"
     * }
     */
    ExhibitorStaff: {
      /** Format: email */
      email?: string;
      /** Format: int32 */
      user_id?: number;
      /** Format: int32 */
      attendee_id?: number | null;
      status?: string;
      /** Format: uri */
      photo_url?: string;
      first_name?: string;
      last_name?: string;
      company?: string;
      role?: string;
    };
    /**
     * @example {
     *   "id": 1,
     *   "company": "EventsCase",
     *   "stand": "Developer",
     *   "link": "https://eventscase.com",
     *   "email": "jane.doe@eventscase.com",
     *   "description": "Long description of the exhibitor...",
     *   "photo_url": "https://eventscase.com/img/user.png",
     *   "order": 1,
     *   "qr_code": "{\"id\":1,\"signature\":\"S9ZzI0DeU:\"}",
     *   "language": "EN",
     *   "address": "30, Baker St.",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://linkedin.com/in/EventsCase",
     *   "youtube": "https://youtube.com/EventsCase",
     *   "instagram": "https://instagram.com/EventsCase",
     *   "config": "{\"header_url\":\"\"}",
     *   "created_at": "2022-09-12 06:53:04",
     *   "updated_at": "2022-09-12 09:33:37",
     *   "published_at": "2022-09-12 09:04:35",
     *   "categories": [
     *     "1"
     *   ],
     *   "staff": [
     *     {
     *       "email": "adam@domain.com",
     *       "user_id": 45,
     *       "attendee_id": 456,
     *       "status": "confirmed",
     *       "photo_url": "https://eventscase.com/img/user.png",
     *       "first_name": "Adam",
     *       "last_name": "Ant",
     *       "company": "Eventscase",
     *       "role": "Developer"
     *     },
     *     {
     *       "email": "bob@domain.com",
     *       "user_id": 56,
     *       "attendee_id": 562,
     *       "status": "confirmed",
     *       "photo_url": "https://eventscase.com/img/user.png",
     *       "first_name": "Bob",
     *       "last_name": "Beamon",
     *       "company": "Eventscase",
     *       "role": "Developer"
     *     }
     *   ]
     * }
     */
    Exhibitor: {
      /** Format: int32 */
      id: number;
      company: string;
      stand: string;
      /** Format: uri */
      link: string;
      /** Format: email */
      email: string;
      description: string;
      /** Format: uri */
      photo_url: string;
      /** Format: int32 */
      order: number;
      qr_code?: string;
      language?: string;
      address?: string;
      /** Format: uri */
      twitter?: string;
      /** Format: uri */
      linkedin?: string;
      /** Format: uri */
      youtube?: string;
      /** Format: uri */
      instagram?: string;
      config?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      published_at?: string;
      categories?: string[];
      staff?: components['schemas']['ExhibitorStaff'][];
    };
    ExhibitorsList: {
      data?: components['schemas']['Exhibitor'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    ApiError_Exhibitor400: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_ExhibitorTypes403: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_ExhibitorTypes412: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Event404: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor type name",
     *   "instructions": "Exhibitor type instructions"
     * }
     */
    exhibitorTypeTranslation: {
      language?: string;
      name?: string;
      instructions?: string;
    };
    exhibitorTypeTranslationsList: components['schemas']['exhibitorTypeTranslation'][];
    /**
     * @example {
     *   "id": 4,
     *   "event_id": 3,
     *   "max_staff_members": 10,
     *   "max_meetings_allowed_per_staff_1to1": 5,
     *   "translations": [
     *     {
     *       "language": "EN",
     *       "name": "Exhibitor type name in EN",
     *       "instructions": "Exhibitor type instructions in EN"
     *     },
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor type name in ES",
     *       "instructions": "Exhibitor type instructions in ES"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor type name in FR",
     *       "instructions": "Exhibitor type instructions in FR"
     *     }
     *   ]
     * }
     */
    exhibitorType: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      max_staff_members?: number;
      /** Format: int32 */
      max_meetings_allowed_per_staff_1to1?: number;
      translations?: components['schemas']['exhibitorTypeTranslationsList'];
    };
    exhibitorTypeList: {
      data?: components['schemas']['exhibitorType'][];
    };
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor name in EN",
     *   "stand": "Stand id in EN",
     *   "description": "Exhibitor description in EN",
     *   "link": "http://mycompany.com",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://es.linkedin.com/company/eventscase",
     *   "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *   "instagram": "https://www.instagram.com/eventscase/",
     *   "photo_url": "https://eventscase.com/img/user.png"
     * }
     */
    exhibitorTranslation: {
      language?: string;
      name?: string;
      stand?: string;
      description?: string;
      /** Format: uri */
      link?: string;
      /** Format: uri */
      twitter?: string;
      /** Format: uri */
      linkedin?: string;
      /** Format: uri */
      youtube?: string;
      /** Format: uri */
      instagram?: string;
      /** Format: uri */
      photo_url?: string;
    };
    exhibitorTranslationsList: components['schemas']['exhibitorTranslation'][];
    /**
     * @example {
     *   "id": 5,
     *   "event_id": 1,
     *   "exhibitor_type_id": 4,
     *   "main_user_id": 45,
     *   "published_at": "2019-09-01T12:03:21+00:00",
     *   "order": 2,
     *   "translations": [
     *     {
     *       "language": "EN",
     *       "name": "Exhibitor name -EN",
     *       "stand": "Exhibitor stand name -EN",
     *       "description": "Exhibitor description -EN",
     *       "link": "http://exhibitor.com",
     *       "twitter": "https://twitter.com/EventsCase",
     *       "linkedin": "https://linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.com/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor name -ES",
     *       "stand": "Exhibitor stand name -ES",
     *       "description": "Exhibitor description -ES",
     *       "link": "http://exhibitor.es",
     *       "twitter": "https://twitter.es/EventsCase",
     *       "linkedin": "https://es.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.es/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor name -FR",
     *       "stand": "Exhibitor stand name -FR",
     *       "description": "Exhibitor description -FR",
     *       "link": "http://exhibitor.fr",
     *       "twitter": "https://twitter.fr/EventsCase",
     *       "linkedin": "https://fr.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.fr/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     }
     *   ]
     * }
     */
    exhibitor: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      exhibitor_type_id?: number;
      /** Format: int32 */
      main_user_id?: number;
      /** Format: date-time */
      published_at?: string;
      /** Format: int32 */
      order?: number;
      translations?: components['schemas']['exhibitorTranslationsList'];
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "exhibitor_type_id": 3,
     *   "order": 2,
     *   "main_user_email": "john.dodd@domain.com",
     *   "main_user_first_name": "John",
     *   "main_user_last_name": "Dodd",
     *   "language": "EN",
     *   "name": "Exhibitor name -EN",
     *   "stand": "Exhibitor stand name -EN",
     *   "description": "Exhibitor description -EN",
     *   "link": "http://exhibitor.com",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://linkedin.com/company/eventscase",
     *   "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *   "instagram": "https://www.instagram.com/eventscase/",
     *   "photo_url": "https://www.instagram.com/eventscase/",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor name -ES",
     *       "stand": "Exhibitor stand name -ES",
     *       "description": "Exhibitor description -ES",
     *       "link": "http://exhibitor.es",
     *       "twitter": "https://twitter.es/EventsCase",
     *       "linkedin": "https://es.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.es/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor name -FR",
     *       "stand": "Exhibitor stand name -FR",
     *       "description": "Exhibitor description -FR",
     *       "link": "http://exhibitor.fr",
     *       "twitter": "https://twitter.fr/EventsCase",
     *       "linkedin": "https://fr.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.fr/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     }
     *   ],
     *   "categories": [
     *     1
     *   ],
     *   "staff": [
     *     {
     *       "email": "adam@domain.com",
     *       "user_id": 45,
     *       "attendee_id": 456,
     *       "status": "confirmed",
     *       "photo_url": "https://eventscase.com/img/user.png",
     *       "first_name": "Adam",
     *       "last_name": "Ant",
     *       "company": "Eventscase",
     *       "role": "Developer"
     *     },
     *     {
     *       "email": "bob@domain.com",
     *       "user_id": 56,
     *       "attendee_id": 565,
     *       "status": "confirmed",
     *       "photo_url": "https://eventscase.com/img/user.png",
     *       "first_name": "Bob",
     *       "last_name": "Beamon",
     *       "company": "Eventscase",
     *       "role": "Developer"
     *     }
     *   ]
     * }
     */
    singleExhibitor: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      /** Format: int32 */
      exhibitor_type_id?: number;
      /** Format: int32 */
      order?: number;
      /** Format: email */
      main_user_email?: string;
      main_user_first_name?: string;
      main_user_last_name?: string;
      language?: string;
      name?: string;
      stand?: string;
      description?: string;
      /** Format: uri */
      link?: string;
      /** Format: uri */
      twitter?: string;
      /** Format: uri */
      linkedin?: string;
      /** Format: uri */
      youtube?: string;
      /** Format: uri */
      instagram?: string;
      /** Format: uri */
      photo_url?: string;
      translations?: components['parameters']['exhibitorTranslationList'];
      categories?: number[];
      staff?: components['schemas']['ExhibitorStaff'][];
    };
    ApiError_VideoCall404: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_VideoCall400: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "videoCall": {
     *     "title": "Titulo video call",
     *     "description": "Descripci'on video call",
     *     "startTime": "2021-05-17 14:00:00",
     *     "endTime": "2021-05-17 15:00:00",
     *     "ownerId": 1,
     *     "type": "call",
     *     "timezone": "Africa/Bamako",
     *     "maxParticipants": 25
     *   },
     *   "vonage": {
     *     "sessionId": "2_MX40NzEyNDY4NH5-MTYyMTU5MjU0NzM0OH4vVERtTWt2RUFSRmJMMWhUeDdNM0dEaCt-fg",
     *     "token": "T1==cGFydG5lcl9pZD00NzEyNDY4NCZzaWc9NTA2MDA2ZGUyOGZmOThhMTdhZmUyZjZhZTZlMzEyOGVlNzBmYmMzYjpzZXNzaW9uX2lkPTJfTVg0ME56RXlORFk0Tkg1LU1UWXlNVFU1TWpVME56TTBPSDR2VkVSdFRXdDJSVUZTUm1KTU1XaFVlRGROTTBkRWFDdC1mZyZjcmVhdGVfdGltZT0xNjIyNDQ4Nzk0JnJvbGU9cHVibGlzaGVyJm5vbmNlPTE2MjI0NDg3OTQuMjc1MzEwMjM5NjM0MzQmZXhwaXJlX3RpbWU9MTYyMzA1MzU5NCZpbml0aWFsX2xheW91dF9jbGFzc19saXN0PWluYWN0aXZl"
     *   }
     * }
     */
    VideoCall: {
      data?: {
        videoCall?: {
          title?: string;
          description?: string;
          /**
           * Format: Y-m-d H:i:s
           * @example Y-m-d H:i:s
           */
          startTime?: string;
          /**
           * Format: Y-m-d H:i:s
           * @example Y-m-d H:i:s
           */
          endTime?: string;
          /**
           * Format: Continent/City
           * @example Africa/Bissau
           */
          timeZone?: string;
          /** @example 1 */
          ownerId?: number;
          /**
           * @description VideoCall type
           * @enum {string}
           */
          status?: 'call' | 'exhibitor_room';
          /**
           * @description Maximum number of participants on a video call
           * @example 20
           */
          maxParticipants?: number;
        };
        vonage?: {
          /** @description Vonage session Id to connect */
          sessionId?: string;
          /** @description Vonage user token to session connection */
          token?: string;
        };
      };
    };
    ApiError_Events403: components['schemas']['ApiError'] & Record<string, never>;
    ApiError_Events404: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "title": "Test Event",
     *   "description": "This is a test event",
     *   "category_id": "1",
     *   "closed": "0",
     *   "default_language": "EN",
     *   "owner_email": "owner@eventscase.com",
     *   "owner_id": "202",
     *   "start_time": 1657892000,
     *   "end_time": 1658010800,
     *   "image": "/img/event_default.svg",
     *   "venue_name": "EventsCase Headquarters",
     *   "venue_address": "51th John Doe's Street",
     *   "latitude": "37.5414656",
     *   "longitude": "-5.0826742",
     *   "timezone": "Europe/London",
     *   "twitter_tag": "#eventscase",
     *   "languages": [
     *     {
     *       "id": "EN",
     *       "name": "English"
     *     }
     *   ],
     *   "topics": [
     *     "Networking",
     *     "Digital"
     *   ],
     *   "metafields": {
     *     "external_id": "e6"
     *   }
     * }
     */
    Event: {
      /** Format: int32 */
      id: number;
      title: string;
      description: string;
      /** Format: int32 */
      category_id?: string | null;
      /** Format: int2 */
      closed?: string;
      default_language?: string;
      owner_email?: string;
      /** Format: int32 */
      owner_id: number;
      /** Format: int32 */
      start_time: number;
      /** Format: int32 */
      end_time: number;
      image?: string;
      venue_name?: string;
      venue_address?: string;
      /** Format: float */
      latitude?: string | null;
      /** Format: float */
      longitude?: string | null;
      timezone: string;
      twitter_tag?: string;
      languages: {
        id: string;
        name: string;
      }[];
      topics?: string[];
      metafields?: {
        external_id?: string;
      };
    };
    EventsList: {
      data?: components['schemas']['Event'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    /**
     * @example {
     *   "id": 1,
     *   "name": "Category 1"
     * }
     */
    EventCategory: {
      /** Format: int32 */
      id: number;
      name: string;
    };
    /**
     * @example {
     *   "id": 1,
     *   "matchmaking": true,
     *   "registration_form_completed": true,
     *   "enable_registration_form_on_app_login": true,
     *   "show_recommendations_tinder_style": true
     * }
     */
    EventConfiguration: {
      /** Format: int32 */
      id: number;
      matchmaking: boolean;
      registration_form_completed: boolean;
      enable_registration_form_on_app_login: boolean;
      show_recommendations_tinder_style: boolean;
    };
    EventConfigurationList: {
      events?: components['schemas']['EventConfiguration'][];
    };
    /**
     * @example {
     *   "59": {
     *     "title": "Interests",
     *     "order": 0,
     *     "options": {
     *       "11": "Technology",
     *       "12": "Politics",
     *       "13": "Economy"
     *     }
     *   },
     *   "60": {
     *     "title": "Language",
     *     "order": 1,
     *     "options": {
     *       "21": "English",
     *       "22": "Spanish",
     *       "23": "Other"
     *     }
     *   }
     * }
     */
    QuestionsFilters: {
      [key: string]:
        | {
            title?: string;
            /** Format: int32 */
            order?: number;
            options?: {
              [key: string]: string | undefined;
            };
          }
        | undefined;
    };
    /**
     * @example {
     *   "1001": [
     *     "11",
     *     "13",
     *     "21"
     *   ],
     *   "1202": [
     *     "12",
     *     "13",
     *     "22"
     *   ]
     * }
     */
    QuestionsFiltersResponses: {
      [key: string]: string[] | undefined;
    };
    ApiError_Speakers403: components['schemas']['ApiError'] & Record<string, never>;
    /**
     * @example {
     *   "id": 1,
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "company": "EventsCase",
     *   "role": "Developer",
     *   "link": "https://eventscase.com",
     *   "email": "jane.doe@eventscase.com",
     *   "description": "Long description of the speaker...",
     *   "photo_url": "https://eventscase.com/img/user.png",
     *   "facebook_url": null,
     *   "youtube_url": null,
     *   "instagram_url": null,
     *   "twitter_url": null,
     *   "linkedin_url": null,
     *   "order": 1
     * }
     */
    Speaker: {
      /** Format: int32 */
      id: number;
      first_name: string;
      last_name: string;
      company: string;
      role: string;
      /** Format: uri */
      link: string;
      /** Format: email */
      email: string;
      description: string;
      /** Format: uri */
      photo_url: string;
      /** Format: uri */
      facebook_url?: string | null;
      /** Format: uri */
      youtube_url?: string | null;
      /** Format: uri */
      instagram_url?: string | null;
      /** Format: uri */
      twitter_url?: string | null;
      /** Format: uri */
      linkedin_url?: string | null;
      /** Format: int32 */
      order?: number;
    };
    SpeakersList: {
      data?: components['schemas']['Speaker'][];
      /**
       * @example [
       *   2,
       *   3
       * ]
       */
      deleted?: number[];
    };
    /**
     * @example {
     *   "error": {
     *     "event_id": "Invalid event ID: -5"
     *   }
     * }
     */
    errors400: {
      /** @description List of errors */
      error?: Record<string, never>;
    };
    /**
     * @example {
     *   "error": {
     *     "event_id": "Event with ID: 45 was not found"
     *   }
     * }
     */
    errors404: {
      /** @description List of errors */
      error?: Record<string, never>;
    };
    /**
     * @example {
     *   "language": "EN",
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "email": "jane.doe@eventscase.com",
     *   "photo_url": "https://eventscase.com/img/user.png",
     *   "description": "Long description of the speaker...",
     *   "link_url": "https://eventscase.com/profiles/en/john_doe",
     *   "facebook_url": "https://facebook.com/en/john_doe",
     *   "youtube_url": "https://youtube.com/en/john_doe",
     *   "instagram_url": "https://instagram.com/en/john_doe",
     *   "twitter_url": "https://twitter.com/en/john_doe",
     *   "linkedin_url": "https://linkedin.com/en/john_doe",
     *   "role": "Developer",
     *   "company": "EventsCase",
     *   "company_logo_url": "https://cdn.eventscase.com/resources/en/company-logo.png",
     *   "completed": 1
     * }
     */
    translatableSpeakerTranslation: {
      language?: string;
      first_name?: string;
      last_name?: string;
      /** Format: email */
      email?: string;
      /** Format: uri */
      photo_url?: string;
      description?: string;
      /** Format: uri */
      link_url?: string;
      /** Format: uri */
      facebook_url?: string | null;
      /** Format: uri */
      youtube_url?: string | null;
      /** Format: uri */
      instagram_url?: string | null;
      /** Format: uri */
      twitter_url?: string | null;
      /** Format: uri */
      linkedin_url?: string | null;
      role?: string;
      company?: string;
      /** Format: uri */
      company_logo_url?: string;
      completed?: boolean;
    };
    /**
     * @example {
     *   "id": 1,
     *   "event_id": 1,
     *   "country": "United Kingdom",
     *   "translations": {
     *     "EN": {
     *       "language": "EN",
     *       "first_name": "Jane",
     *       "last_name": "Doe",
     *       "email": "jane.doe@eventscase.com",
     *       "photo_url": "https://eventscase.com/img/user.png",
     *       "description": "Long description of the speaker...",
     *       "link_url": "https://eventscase.com/profiles/en/jane_doe",
     *       "facebook_url": "https://facebook.com/en/john_doe",
     *       "youtube_url": "https://youtube.com/en/john_doe",
     *       "instagram_url": "https://instagram.com/en/john_doe",
     *       "twitter_url": "https://twitter.com/en/john_doe",
     *       "linkedin_url": "https://linkedin.com/en/john_doe",
     *       "role": "Developer",
     *       "company": "EventsCase Ltd.",
     *       "company_logo_url": "https://cdn.eventscase.com/resources/en/company-logo.png",
     *       "completed": 1
     *     },
     *     "ES": {
     *       "language": "ES",
     *       "first_name": "Juana",
     *       "last_name": "Doez",
     *       "email": "jane.doe@eventscase.es",
     *       "photo_url": "https://eventscase.com/img/es/user.png",
     *       "description": "Descripcion larga del speaker...",
     *       "link_url": "https://eventscase.com/profiles/es/jane_doe",
     *       "facebook_url": "https://facebook.com/es/john_doe",
     *       "youtube_url": "https://youtube.com/es/john_doe",
     *       "instagram_url": "https://instagram.com/es/john_doe",
     *       "twitter_url": "https://twitter.com/es/john_doe",
     *       "linkedin_url": "https://linkedin.com/es/john_doe",
     *       "role": "Desarrollador",
     *       "company": "EventsCase S.A.",
     *       "company_logo_url": "https://cdn.eventscase.com/resources/es/company-logo.png",
     *       "completed": 1
     *     }
     *   }
     * }
     */
    translatableSpeaker: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      event_id?: number;
      country?: string;
      translations?: {
        '{language}'?: components['schemas']['translatableSpeakerTranslation'];
      };
    };
    /**
     * @example {
     *   "error": "invalid_grant",
     *   "error_description": "Invalid refresh token"
     * }
     */
    OAuthError: {
      error?: string;
      error_description?: string;
    };
    /**
     * @example {
     *   "access_token": "0073688a51c226558632d9a8d3fea10879414d00",
     *   "expires_in": 14400,
     *   "token_type": "Bearer"
     * }
     */
    OAuthToken: {
      access_token: string;
      /** Format: int32 */
      expires_in: number;
      token_type: string;
    };
  };
  responses: never;
  parameters: {
    /**
     * @description Token signature
     * @example YourSignature
     */
    signatureHeader: string;
    /**
     * @description Bearer AccessToken
     * @example Bearer 0073688a51c226558632d9a8d3fea10879414d00
     */
    authorizationHeader: string;
    /** @description Timestamp to filter documents created, modified or deleted after that datetime */
    tsFromFilter: number;
    /** @description Timestamp to filter documents created, modified or deleted before that datetime */
    tsToFilter: number;
    /** @description Offset */
    offset: number;
    /** @description Limit */
    limit: number;
    /**
     * @description Stream ID
     * @example 1
     */
    streamId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Green",
     *   "color": "#00FF00"
     * }
     */
    translatableStreamTranslation: string;
    /**
     * @example {
     *   "order": 1,
     *   "language": "EN",
     *   "name": "Green",
     *   "color": "#00FF00",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Verde",
     *       "color": "#00FF00"
     *     }
     *   ]
     * }
     */
    translatableStream: string;
    /**
     * @description Payment ID
     * @example 12345
     */
    paymentId: number;
    /**
     * @description Room ID
     * @example 1
     */
    roomId: number;
    /**
     * @example {
     *   "name": "Room name"
     * }
     */
    Room: string;
    /**
     * @example {
     *   "name": "Room name -en",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Room name -es"
     *     }
     *   ]
     * }
     */
    RoomForAddOrUpdate: string;
    RoomTranslationForUpdate: string;
    /**
     * @description Session ID
     * @example 1
     */
    sessionId: number;
    speakerSessionList: string;
    /**
     * @example {
     *   "language": "EN",
     *   "title": "Session title",
     *   "short_description": "Short description of the session...",
     *   "description": "Long description of the session..."
     * }
     */
    translatableSessionTranslation: string;
    /**
     * @example {
     *   "color": "#10CF45",
     *   "opening": "2019-05-20 12:00:00",
     *   "closing": "2019-05-20 13:30:00",
     *   "order": 1,
     *   "room_id": 2,
     *   "stream_id": 3,
     *   "language": "EN",
     *   "title": "Session title",
     *   "short_description": "Short description of the session...",
     *   "description": "Long description of the session...",
     *   "session_image": "http://eventscase.loc/img/EventsCase/logo_white.png",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "title": "Título de la sesión",
     *       "short_description": "Descripción corta de la sesión...",
     *       "description": "Descripción larga de la sesión..."
     *     }
     *   ],
     *   "speakers": [
     *     1,
     *     2,
     *     3
     *   ],
     *   "sponsors": [
     *     3,
     *     7,
     *     9
     *   ],
     *   "register_per_session": false,
     *   "max_attendees": 20
     * }
     */
    translatableSession: string;
    /**
     * @description User ID
     * @example 1
     */
    userId: number;
    /**
     * @description Sponsor Category ID
     * @example 1
     */
    sponsorCategoryId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "First sponsor category"
     * }
     */
    translatableSponsorCategoryTranslation: string;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "First sponsor category",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Primera categoria de sponsor"
     *     }
     *   ]
     * }
     */
    translatableSponsorCategory: string;
    /**
     * @description Sponsor ID
     * @example 1
     */
    sponsorId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "description": "Long description of the sponsor..."
     * }
     */
    translatableSponsorTranslation: string;
    /**
     * @example {
     *   "title": "EventsCase",
     *   "image": "https://cdn.eventscase.com/eventscase.com/uploads/users/159/uploads/5ba9f49f16f7d.png",
     *   "link": "https://eventscase.com",
     *   "category": 2,
     *   "language": "EN",
     *   "description": "Long description of the sponsor...",
     *   "translations": {
     *     "ES": {
     *       "language": "ES",
     *       "description": "Descripcion larga del sponsor..."
     *     }
     *   }
     * }
     */
    translatableSponsor: string;
    /**
     * @description Attendee ID
     * @example 1
     */
    attendeeId: number;
    /**
     * @description Exhibitor Type ID
     * @example 5
     */
    exhibitorTypeId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor type name",
     *   "instructions": "Exhibitor type instructions"
     * }
     */
    exhibitorTypeTranslation: string;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor type name",
     *   "instructions": "Exhibitor type instructions"
     * }
     */
    exhibitorTypeTranslationForUpdate: string;
    /**
     * @example {
     *   "max_staff_members": 10,
     *   "max_meetings_allowed_per_staff_1to1": 5,
     *   "language": "EN",
     *   "name": "Exhibitor type name in EN",
     *   "instructions": "Exhibitor type instructions in EN",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor type name in ES",
     *       "instructions": "Exhibitor type instructions in ES"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor type name in FR",
     *       "instructions": "Exhibitor type instructions in FR"
     *     }
     *   ]
     * }
     */
    exhibitorType: string;
    /**
     * @example {
     *   "max_staff_members": 10,
     *   "max_meetings_allowed_per_staff_1to1": 5,
     *   "name": "Exhibitor type name in EN",
     *   "instructions": "Exhibitor type instructions in EN",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor type name in ES",
     *       "instructions": "Exhibitor type instructions in ES"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor type name in FR",
     *       "instructions": "Exhibitor type instructions in FR"
     *     }
     *   ]
     * }
     */
    exhibitorTypeForUpdate: string;
    /**
     * @description Exhibitor ID
     * @example 10
     */
    exhibitorId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor name in EN",
     *   "stand": "Stand id in EN",
     *   "description": "Exhibitor description in EN",
     *   "email": "Email of main contact of the stand in EN",
     *   "link": "http://mycompany.com",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://es.linkedin.com/company/eventscase",
     *   "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *   "instagram": "https://www.instagram.com/eventscase/",
     *   "photo_url": "https://eventscase.com/img/user.png"
     * }
     */
    exhibitorTranslation: string;
    exhibitorTranslationList: string;
    /**
     * @example {
     *   "exhibitor_type_id": 3,
     *   "order": 2,
     *   "main_user_email": "john.dodd@domain.com",
     *   "main_user_first_name": "John",
     *   "main_user_last_name": "Dodd",
     *   "language": "EN",
     *   "name": "Exhibitor name -EN",
     *   "stand": "Exhibitor stand name -EN",
     *   "description": "Exhibitor description -EN",
     *   "link": "http://exhibitor.com",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://linkedin.com/company/eventscase",
     *   "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *   "instagram": "https://www.instagram.com/eventscase/",
     *   "photo_url": "https://www.instagram.com/eventscase/",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor name -ES",
     *       "stand": "Exhibitor stand name -ES",
     *       "description": "Exhibitor description -ES",
     *       "link": "http://exhibitor.es",
     *       "twitter": "https://twitter.es/EventsCase",
     *       "linkedin": "https://es.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.es/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor name -FR",
     *       "stand": "Exhibitor stand name -FR",
     *       "description": "Exhibitor description -FR",
     *       "link": "http://exhibitor.fr",
     *       "twitter": "https://twitter.fr/EventsCase",
     *       "linkedin": "https://fr.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.fr/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     }
     *   ]
     * }
     */
    exhibitor: string;
    /**
     * @example {
     *   "language": "EN",
     *   "name": "Exhibitor name in EN",
     *   "stand": "Stand id in EN",
     *   "description": "Exhibitor description in EN",
     *   "email": "Email of main contact of the stand in EN",
     *   "link": "http://mycompany.com",
     *   "twitter": "https://twitter.com/EventsCase",
     *   "linkedin": "https://es.linkedin.com/company/eventscase",
     *   "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *   "instagram": "https://www.instagram.com/eventscase/",
     *   "photo_url": "https://eventscase.com/img/user.png"
     * }
     */
    exhibitorTranslationForUpdate: string;
    exhibitorTranslationListForUpdate: string;
    /**
     * @example {
     *   "exhibitor_type_id": 3,
     *   "main_user_email": "jane@doe.com",
     *   "main_user_first_name": "Jane",
     *   "main_user_last_name": "Doe",
     *   "translations": [
     *     {
     *       "language": "EN",
     *       "name": "Exhibitor name -EN",
     *       "stand": "Exhibitor stand name -EN",
     *       "description": "Exhibitor description -EN",
     *       "link": "http://exhibitor.com",
     *       "twitter": "https://twitter.com/EventsCase",
     *       "linkedin": "https://linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.com/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "ES",
     *       "name": "Exhibitor name -ES",
     *       "stand": "Exhibitor stand name -ES",
     *       "description": "Exhibitor description -ES",
     *       "link": "http://exhibitor.es",
     *       "twitter": "https://twitter.es/EventsCase",
     *       "linkedin": "https://es.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.es/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     },
     *     {
     *       "language": "FR",
     *       "name": "Exhibitor name -FR",
     *       "stand": "Exhibitor stand name -FR",
     *       "description": "Exhibitor description -FR",
     *       "link": "http://exhibitor.fr",
     *       "twitter": "https://twitter.fr/EventsCase",
     *       "linkedin": "https://fr.linkedin.com/company/eventscase",
     *       "youtube": "https://www.youtube.com/channel/UCqYpKyoJtCRr2-Yi7yxBJvQ",
     *       "instagram": "https://www.instagram.fr/eventscase/",
     *       "photo_url": "https://eventscase.com/img/user.png"
     *     }
     *   ]
     * }
     */
    exhibitorForUpdate: string;
    /** @description If set, all exhibitors are returned. If not, only published exhibitors are returned. */
    getAll: number;
    /**
     * @description VideoCall uuid
     * @example edf93e23-d24a-4b1c-8ed7-1c3a64f33ea0
     */
    videoCallUuid: string;
    /**
     * @description Event ID
     * @example 1
     */
    eventId: number;
    /**
     * @description Speaker ID
     * @example 1
     */
    speakerId: number;
    /**
     * @example {
     *   "language": "EN",
     *   "description": "Long description of the speaker...",
     *   "link_url": "https://eventscase.com/profiles/en/john_doe",
     *   "role": "Developer",
     *   "company": "EventsCase",
     *   "company_logo_url": "https://cdn.eventscase.com/resources/en/company-logo.png"
     * }
     */
    translatableSpeakerTranslation: string;
    /**
     * @example {
     *   "country": "United Kingdom",
     *   "language": "EN",
     *   "first_name": "Jane",
     *   "last_name": "Doe",
     *   "email": "jane.doe@eventscase.com",
     *   "photo_url": "https://eventscase.com/img/user.png",
     *   "description": "Long description of the speaker...",
     *   "link_url": "https://eventscase.com/profiles/en/jane_doe",
     *   "facebook_url": "https://facebook.com/en/john_doe",
     *   "youtube_url": "https://youtube.com/en/john_doe",
     *   "instagram_url": "https://instagram.com/en/john_doe",
     *   "twitter_url": "https://twitter.com/en/john_doe",
     *   "linkedin_url": "https://linkedin.com/en/john_doe",
     *   "role": "Developer",
     *   "company": "EventsCase Ltd.",
     *   "company_logo_url": "https://cdn.eventscase.com/resources/en/company-logo.png",
     *   "translations": [
     *     {
     *       "language": "ES",
     *       "first_name": "Juana",
     *       "last_name": "Doez",
     *       "email": "jane.doe@eventscase.es",
     *       "photo_url": "https://eventscase.com/img/es/user.png",
     *       "description": "Descripcion larga del speaker...",
     *       "link_url": "https://eventscase.com/profiles/es/jane_doe",
     *       "facebook_url": "https://facebook.com/es/john_doe",
     *       "youtube_url": "https://youtube.com/es/john_doe",
     *       "instagram_url": "https://instagram.com/es/john_doe",
     *       "twitter_url": "https://twitter.com/es/john_doe",
     *       "linkedin_url": "https://linkedin.com/esjohn_doe",
     *       "role": "Desarrollador",
     *       "company": "EventsCase S.A.",
     *       "company_logo_url": "https://cdn.eventscase.com/resources/es/company-logo.png"
     *     }
     *   ]
     * }
     */
    translatableSpeaker: string;
    /**
     * @description Basic BASE64(client_id:client_secret)
     * @example Basic WW91cklEOllvdXJTZWNyZXRTZWNyZXQ=
     */
    OAuthAuthorizationHeader: string;
    /** @description Grant type data and sha-256 hash of signature */
    OAuthRequestBody: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  getEventStreams: {
    /** @description Gets a list of an event streams */
    responses: {
      /** @description List of event streams */
      200: {
        content: {
          'application/json': components['schemas']['StreamList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
    };
  };
  addEventStream: {
    /** @description Creates an event stream */
    /** @description Stream data */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableStream'];
      };
    };
    responses: {
      /** @description Event stream added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableStream'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventStream: {
    /** @description Updates an event stream */
    /** @description Stream data */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableStream'];
      };
    };
    responses: {
      /** @description Event stream updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableStream'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  deleteEventStream: {
    /** @description Deletes an event stream */
    responses: {
      /** @description Event stream updated */
      200: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getCheckout: {
    /** @description Get checkout details from payment ID */
    responses: {
      /** @description Full checkout details */
      200: {
        content: {
          'application/json': components['schemas']['Checkout'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Checkout_404'];
        };
      };
    };
  };
  getEventCheckouts: {
    /** @description Get all checkout details from a given event ID */
    parameters: {
      /**
       * @description result data limit (max 100)
       * @example 100
       */
      /**
       * @description specifies how many transactions to skip within the result
       * @example 500
       */
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Full checkouts details from a given event ID */
      200: {
        content: {
          'application/json': components['schemas']['CheckoutList'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Checkout_404'];
        };
      };
    };
  };
  getUserCheckouts: {
    /** @description Get all checkout details from a given user ID */
    parameters: {
      /**
       * @description result data limit (max 100)
       * @example 100
       */
      /**
       * @description specifies how many transactions to skip within the result
       * @example 500
       */
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Full checkouts details from a given user ID */
      200: {
        content: {
          'application/json': components['schemas']['CheckoutList'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Checkout_404'];
        };
      };
    };
  };
  getEventPaymentsAbandons: {
    /** @description Get list of abandoned payments */
    responses: {
      /** @description List of abandoned payments */
      200: {
        content: {
          'application/json': components['schemas']['AbandonedPaymentsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Payments403'];
        };
      };
    };
  };
  getEventRooms: {
    /** @description Gets a list of an event rooms */
    responses: {
      /** @description List of event rooms */
      200: {
        content: {
          'application/json': components['schemas']['RoomList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
    };
  };
  addEventRoom: {
    /** @description Create an event room */
    /** @description Room data */
    requestBody: {
      content: {
        'application/json': components['parameters']['RoomForAddOrUpdate'];
      };
    };
    responses: {
      /** @description Event room added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['RoomForAddOrUpdate'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventRoom: {
    /** @description Update an event room */
    /** @description Room data */
    requestBody: {
      content: {
        'application/json': components['parameters']['RoomForAddOrUpdate'];
      };
    };
    responses: {
      /** @description Event room updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['RoomForAddOrUpdate'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getEventSessions: {
    /** @description Get list of an event sessions */
    responses: {
      /** @description List of event sessions */
      200: {
        content: {
          'application/json': components['schemas']['SessionsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sessions403'];
        };
      };
    };
  };
  getEventSessionsAgendaData: {
    /** @description Get the agenda data for the event's sessions */
    responses: {
      /** @description Agenda data for the event's sessions */
      200: {
        content: {
          'application/json': components['schemas']['SessionsAgendaData'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sessions403'];
        };
      };
    };
  };
  GET_attendees: {
    /** @description Get list of session checked attendees */
    responses: {
      /** @description List of session checked attendees */
      200: {
        content: {
          'application/json': components['schemas']['sessionAttendeeList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sessions403'];
        };
      };
    };
  };
  getEventSpeakersSessions: {
    /** @description Get list of an speakers sessions */
    responses: {
      /** @description List of speakers sessions */
      200: {
        content: {
          'application/json': components['schemas']['SpeakersList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sessions403'];
        };
      };
    };
  };
  getEventSponsorsSessions: {
    /** @description Get list of an sponsors sessions */
    responses: {
      /** @description List of sponsor sessions */
      200: {
        content: {
          'application/json': components['schemas']['SponsorsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sessions403'];
        };
      };
    };
  };
  addEventSession: {
    /** @description Create an event session */
    /** @description Session data */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSession'];
      };
    };
    responses: {
      /** @description Event session added */
      200: {
        content: {
          'application/json': {
            data?: {
              session?: components['schemas']['translatableSession'];
              speakers?: components['schemas']['sessionSpeakerList'];
              sponsors?: components['schemas']['sessionSponsorList'];
            };
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventSession: {
    /** @description Update an event session */
    /** @description JSON Session */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSession'];
      };
    };
    responses: {
      /** @description Event session updated */
      200: {
        content: {
          'application/json': {
            data?: {
              session?: components['schemas']['translatableSession'];
              speakers?: components['schemas']['sessionSpeakerList'];
              sponsors?: components['schemas']['sessionSponsorList'];
            };
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  deleteEventSession: {
    /** @description Delete an event session */
    responses: {
      /** @description Event session deleted */
      200: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getUsers: {
    /** @description Get user list data */
    parameters: {
      /**
       * @description result data limit (max 100)
       * @example 100
       */
      /**
       * @description specifies how many users to skip within the result
       * @example 500
       */
      /**
       * @description Timestamp to filter users created or modified after that datetime
       * @example 1510085963
       */
      query: {
        limit?: number;
        offset?: number;
        ts_from?: string;
      };
    };
    responses: {
      /** @description User object, with additional profile questions and responses */
      200: {
        content: {
          'application/json': components['schemas']['UserWithSurvey'][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Users400'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  login: {
    /** @description Log in as a user */
    /** @description User login details */
    requestBody: {
      content: {
        /**
         * @example {
         *   "user": "jon.doe@eventscase.com",
         *   "password": "MySuperSecretP4SSW0RD"
         * }
         */
        'application/x-www-form-urlencoded': {
          /** Format: email */
          user?: string;
          /** Format: password */
          password?: string;
        };
      };
    };
    responses: {
      /** @description User object and updated OAuth refresh token */
      200: {
        content: {
          'application/json': components['schemas']['UserWithToken'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  reset_password: {
    /** @description Requests a new password */
    /** @description User email */
    requestBody: {
      content: {
        /**
         * @example {
         *   "email": "jon.doe@eventscase.com"
         * }
         */
        'application/x-www-form-urlencoded': {
          /** Format: email */
          email?: string;
        };
      };
    };
    responses: {
      /** @description Successfull operation */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Invalid email */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_UsersResetPassword400'];
        };
      };
    };
  };
  getUserById: {
    /** @description Get user data */
    responses: {
      /** @description User object, with additional profile questions and responses */
      200: {
        content: {
          'application/json': {
            user?: components['schemas']['UserWithSurvey'];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  updateUserProfile: {
    /** @description Update a user's profile. */
    /** @description User data to be modified */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "first_name": "Jon",
         *   "role": "QA Engineer",
         *   "motto": "New motto"
         * }
         */
        'application/x-www-form-urlencoded': {
          first_name?: string;
          last_name?: string;
          company?: string;
          role?: string;
          motto?: string;
          long_bio?: string;
          phone?: string;
          linkedin_url?: string;
          twitter_user?: string;
          facebook_url?: string;
          googleplus_url?: string;
          site_url?: string;
        };
      };
    };
    responses: {
      /** @description User object, with additional profile questions and responses */
      200: {
        content: {
          'application/json': {
            user?: components['schemas']['UserWithSurvey'];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  getLoginMethods: {
    /** @description Get a list of available login methods. */
    responses: {
      /** @description A list with the available methods (password, otp, magic_link) */
      200: {
        content: {
          'application/json': {
            methods?: Record<string, never>;
          };
        };
      };
      /** @description Invalid request */
      400: never;
    };
  };
  postOtpRequest: {
    /** @description Send an email to the given user with an OTP code */
    /** @description User email */
    requestBody: {
      content: {
        /**
         * @example {
         *   "user": "jon.doe@eventscase.com"
         * }
         */
        'application/x-www-form-urlencoded': {
          /** Format: email */
          user?: string;
        };
      };
    };
    responses: {
      /** @description The code has been sent */
      200: never;
      /** @description Invalid Request. It may happen if the APP_ID is null */
      400: never;
      /** @description Unable to create the OTP code. It may happen if the OTP option is disabled at the whitelabel side or the user does not exist */
      422: never;
    };
  };
  consume_otp: {
    /** @description Consume the given OTP code for the given user */
    requestBody: {
      content: {
        /**
         * @example {
         *   "user": "jon.doe@eventscase.com",
         *   "otp": "123456"
         * }
         */
        'application/x-www-form-urlencoded': {
          /** Format: email */
          user?: string;
          otp?: string;
        };
      };
    };
    responses: {
      /** @description A list of clients this user belongs to and the auth_token needed for finally log in */
      200: {
        content: {
          'application/json': {
            auth_token?: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';
            // eslint-disable-next-line @typescript-eslint/ban-types
            clients?: [[object, Object]];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Users400'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ApiError_Users401'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  login_otp: {
    /** @description Log in as a user for a specific client */
    /** @description The auth_token parameter is the one obtained in users/consume_otp */
    requestBody: {
      content: {
        /**
         * @example {
         *   "auth_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
         * }
         */
        'application/x-www-form-urlencoded': {
          auth_token?: string;
        };
      };
    };
    responses: {
      /** @description User object and updated OAuth refresh token */
      200: {
        content: {
          'application/json': components['schemas']['UserWithToken'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Users400'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ApiError_Users401'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Users404'];
        };
      };
    };
  };
  getEventSponsorsCategories: {
    /** @description Get list of an event sponsors categories */
    responses: {
      /** @description List of event sponsors categories */
      200: {
        content: {
          'application/json': components['schemas']['SponsorsCategory'][];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sponsors403'];
        };
      };
    };
  };
  addEventSponsorCategory: {
    /** @description Adds a sponsor category to an event */
    /** @description JSON Sponsor Category */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSponsorCategory'];
      };
    };
    responses: {
      /** @description Sponsor category added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSponsorCategory'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_SponsorCategories403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventSponsorCategory: {
    /** @description Updates a sponsor category data */
    /** @description JSON Sponsor Category */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSponsorCategory'];
      };
    };
    responses: {
      /** @description Sponsor category updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSponsorCategory'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_SponsorCategories403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  deleteEventSponsorCategory: {
    /** @description Deletes a sponsor category data */
    responses: {
      /** @description Sponsor category deleted */
      200: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_SponsorCategories403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getEventSponsors: {
    /** @description Get list of an event sponsors */
    responses: {
      /** @description List of event sponsors */
      200: {
        content: {
          'application/json': components['schemas']['SponsorsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sponsors403'];
        };
      };
    };
  };
  addEventSponsor: {
    /** @description Adds a sponsor to an event */
    /** @description JSON Sponsor */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSponsor'];
      };
    };
    responses: {
      /** @description Sponsor added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSponsor'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sponsors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventSponsor: {
    /** @description Updates a sponsor data */
    /** @description JSON Sponsor */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSponsor'];
      };
    };
    responses: {
      /** @description Sponsor updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSponsor'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sponsors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  deleteEventSponsor: {
    /** @description Deletes a sponsor data */
    responses: {
      /** @description Sponsor deleted */
      200: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Sponsors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getEventAttendees: {
    /** @description Get list of an event attendees */
    parameters: {
      /** @description Set to any value to request public registration questionnaire (object field: questionnaire) */
      query: {
        questionnaire?: boolean;
      };
    };
    responses: {
      /** @description List of event attendees */
      200: {
        content: {
          'application/json': components['schemas']['attendeeListReturned'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees403'];
        };
      };
    };
  };
  createEventAttendee: {
    /** @description Create an attendee */
    /** @description Attendee data to be created. Ticket ID become mandatory if the event is not free */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "email": "jane.doe@eventscase.com",
         *   "password": "VerySecurePassword1",
         *   "photo_url": "https://cdn.eventscase.com/eventscase.fuf.me/uploads/users/3/uploads/631b01500869f.png",
         *   "category": "Visitor",
         *   "ticket_id": 54,
         *   "qr_code": "thisisaveryrandomcode",
         *   "profile": {
         *     "title": "Ms.",
         *     "first_name": "Jane",
         *     "last_name": "Doe",
         *     "company": "Eventscase Ltd",
         *     "role": "Developer",
         *     "phone": "+34 654321098",
         *     "address_line_1": "12, Downing Street",
         *     "address_line_2": "City of Westminster",
         *     "address_line_3": "Near to Prime Minister",
         *     "town": "London",
         *     "post_code": "SW1A 2AA",
         *     "country": "United Kingdom",
         *     "website": "https://janedoe.com",
         *     "facebook": "https://facebook.com/janedoe",
         *     "instagram": "https://instagram.com/janedoe",
         *     "linkedin": "https://linkedin.com/janedoe",
         *     "youtube": "https://youtube.com/janedoe",
         *     "twitter": "https://twitter.com/janedoe"
         *   }
         * }
         */
        'application/json': {
          /** Format: email */
          email: string;
          password?: string;
          /** Format: uri */
          photo_url?: string;
          category?: string;
          /** Format: int32 */
          ticket_id?: number;
          qr_code?: string;
          profile?: {
            title?: string;
            first_name?: string;
            last_name?: string;
            company?: string;
            role?: string;
            phone?: string;
            address_line_1?: string;
            address_line_2?: string;
            address_line_3?: string;
            town?: string;
            post_code?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            /** Format: uri */
            facebook?: string;
            /** Format: uri */
            instagram?: string;
            /** Format: uri */
            linkedin?: string;
            /** Format: uri */
            youtube?: string;
            /** Format: uri */
            twitter?: string;
          };
        };
      };
    };
    responses: {
      /** @description Attendee was created */
      201: {
        content: {
          'application/json': {
            id?: number;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees400'];
        };
      };
      /** @description The attendee already exists */
      422: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees422'];
        };
      };
    };
  };
  getEventAttendee: {
    /** @description Get an attendee */
    parameters: {
      /** @description Set to any value to request public registration questionnaire (object field: questionnaire) */
      query: {
        questionnaire?: boolean;
      };
    };
    responses: {
      /** @description Attendee data */
      200: {
        content: {
          'application/json': components['schemas']['attendeeReturned'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees403'];
        };
      };
    };
  };
  updateEventAttendee: {
    /** @description Update an attendee */
    /** @description Attendee data to be modified */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "category": "Visitor",
         *   "photo_url": "https://cdn.eventscase.com/eventscase.fuf.me/uploads/users/3/uploads/631b01500869f.png",
         *   "confirmed": 1,
         *   "qr_code": "6E6UtcZ3pA7XY4J_J-mDyPr3SF4:",
         *   "profile": {
         *     "title": "Ms.",
         *     "first_name": "Jane",
         *     "last_name": "Doe",
         *     "company": "Eventscase Ltd",
         *     "role": "Developer",
         *     "phone": "+34 654321098",
         *     "address_line_1": "12, Downing Street",
         *     "address_line_2": "City of Westminster",
         *     "address_line_3": "Near to Prime Minister",
         *     "town": "London",
         *     "post_code": "SW1A 2AA",
         *     "country": "United Kingdom",
         *     "website": "https://janedoe.com",
         *     "facebook": "https://facebook.com/janedoe",
         *     "instagram": "https://instagram.com/janedoe",
         *     "linkedin": "https://linkedin.com/janedoe",
         *     "youtube": "https://youtube.com/janedoe",
         *     "twitter": "https://twitter.com/janedoe"
         *   }
         * }
         */
        'application/json': {
          category?: string;
          /** Format: uri */
          photo_url?: string;
          /** Format: int23 */
          confirmed?: number;
          qr_code?: string;
          profile?: {
            title?: string;
            first_name?: string;
            last_name?: string;
            company?: string;
            role?: string;
            phone?: string;
            address_line_1?: string;
            address_line_2?: string;
            address_line_3?: string;
            town?: string;
            post_code?: string;
            country?: string;
            /** Format: uri */
            website?: string;
            /** Format: uri */
            facebook?: string;
            /** Format: uri */
            instagram?: string;
            /** Format: uri */
            linkedin?: string;
            /** Format: uri */
            youtube?: string;
            /** Format: uri */
            twitter?: string;
          };
        };
      };
    };
    responses: {
      /** @description Attendee updated */
      204: never;
      /** @description Attendee or event not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees404'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees409'];
        };
      };
    };
  };
  getExhibitorsVisited: {
    /** @description Gets a list of exhibitors visited by an attendee */
    responses: {
      /** @description List of exhibitors visited by an attendee */
      200: {
        content: {
          'application/json': components['schemas']['ExhibitorsVisitedList'];
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited404'];
        };
      };
    };
  };
  setExhibitorAsVisited: {
    /** @description Sets an exhibitor as visited by an attendee. */
    parameters: {
      /** @description If the parameter value is `1`, the user data will be registered in the exhibitor's lead list */
      query: {
        allowed_information_sharing?: number;
      };
    };
    responses: {
      /** @description Sets an exhibitor as visited by an attendee */
      204: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited404'];
        };
      };
    };
  };
  setExhibitorAsNotVisited: {
    /** @description Sets an exhibitor as not visited by an attendee. If the user data was registered in the exhibitor's lead list, it will be removed too */
    responses: {
      /** @description Sets an exhibitor as not visited by an attendee */
      204: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorsVisited404'];
        };
      };
    };
  };
  getEventAttendeesClassification: {
    /** @description Get game classification list of attendees. Only those attendees who participated in the game will be shown */
    parameters: {
      /** @description Order by points */
      query: {
        order_by_points?: 'ASC' | 'DESC';
      };
    };
    responses: {
      /** @description Classification attendee list */
      200: {
        content: {
          'application/json': components['schemas']['AttendeesClassificationList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees403'];
        };
      };
    };
  };
  getEventAttendeeClassification: {
    /** @description Get game classification data of attendee. If an attendee doesn't exist or has not participated in the game, a 404 error will be thrown */
    parameters: {
      /** @description Attendee ID */
      path: {
        attendeeId: number;
      };
    };
    responses: {
      /** @description Classification attendee list with rank */
      200: {
        content: {
          'application/json': components['schemas']['AttendeeClassificationList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees403'];
        };
      };
      /** @description Attendee not found or is not classified */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees404'];
        };
      };
    };
  };
  getEventAttendeeByTextOrQR: {
    /** @description Search for event attendees by text or QR code */
    parameters: {
      /** @description Attendee QR */
      /** @description Text to compare with first_name, last_name, role, email, company or eo_notes */
      /** @description Returns only the attendees that are registered to this session ID */
      query: {
        qr?: string;
        query?: string;
        session_id?: string;
      };
    };
    responses: {
      /** @description List of attendees matching query or QR, limited to 100 */
      200: {
        content: {
          'application/json': components['schemas']['AttendeesFindArray'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Attendees403'];
        };
      };
      /** @description Session Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Session404'];
        };
      };
    };
  };
  getEventExhibitors: {
    /** @description Gets a list of an event exhibitors */
    responses: {
      /** @description List of event exhibitors */
      200: {
        content: {
          'application/json': components['schemas']['ExhibitorsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
    };
  };
  addEventExhibitor: {
    /** @description Adds an event exhibitor */
    /** @description Exhibitor data */
    requestBody?: {
      content: {
        'application/json': components['parameters']['exhibitor'];
      };
    };
    responses: {
      /** @description Event exhibitor added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitor'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitor400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  getEventExhibitor: {
    /** @description Gets an event exhibitor */
    responses: {
      /** @description Event exhibitor returned */
      200: {
        content: {
          'application/json': components['schemas']['singleExhibitor'];
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitor400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  updateEventExhibitor: {
    /** @description Updates an event exhibitor */
    /** @description Exhibitor data */
    requestBody?: {
      content: {
        'application/json': components['parameters']['exhibitorForUpdate'];
      };
    };
    responses: {
      /** @description Event exhibitor updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitor'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitor400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  deleteEventExhibitor: {
    /** @description Deletes an event exhibitor */
    responses: {
      /** @description Event exhibitor deleted */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitor'];
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  publishEventExhibitor: {
    /** @description Publishes an event exhibitor */
    responses: {
      /** @description Event exhibitor published */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitor'];
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  unpublishEventExhibitor: {
    /** @description Unpublishes an event exhibitor */
    responses: {
      /** @description Event exhibitor unpublished */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitor'];
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitors403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  getEventExhibitorTypes: {
    /** @description Gets a list of an event exhibitor types */
    responses: {
      /** @description List of event exhibitor types */
      200: {
        content: {
          'application/json': components['schemas']['exhibitorTypeList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes403'];
        };
      };
      /** @description Event not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  addEventExhibitorType: {
    /** @description Adds an event exhibitor type */
    /** @description Exhibitor type data */
    requestBody?: {
      content: {
        'application/json': components['parameters']['exhibitorType'];
      };
    };
    responses: {
      /** @description Event exhibitor type added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitorType'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitor400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  getEventExhibitorType: {
    /** @description Gets an event exhibitor type */
    responses: {
      /** @description Event exhibitor type updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitorType'];
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  updateEventExhibitorType: {
    /** @description Updates an event exhibitor type */
    /** @description Exhibitor type data */
    requestBody?: {
      content: {
        'application/json': components['parameters']['exhibitorTypeForUpdate'];
      };
    };
    responses: {
      /** @description Event exhibitor type updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitorTypeForUpdate'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_Exhibitor400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
    };
  };
  deleteEventExhibitorTypes: {
    /** @description Deletes an event exhibitor type */
    responses: {
      /** @description Event exhibitor type deleted */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['exhibitorType'];
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Event404'];
        };
      };
      /** @description Precondition failed */
      412: {
        content: {
          'application/json': components['schemas']['ApiError_ExhibitorTypes412'];
        };
      };
    };
  };
  getVideoCallByUuid: {
    /** @description Get a video call with vonage data */
    responses: {
      /** @description Video call object, with Vonage session id and token for current user */
      200: {
        content: {
          'application/json': {
            user?: components['schemas']['VideoCall'];
          };
        };
      };
      /** @description Not Found */
      400: {
        content: {
          'application/json': components['schemas']['ApiError_VideoCall404'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_VideoCall404'];
        };
      };
    };
  };
  getEvents: {
    /** @description Get list of events */
    responses: {
      /** @description List of events */
      200: {
        content: {
          'application/json': components['schemas']['EventsList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Events403'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ApiError_Events404'];
        };
      };
    };
  };
  getEventCategories: {
    /** @description Get list of event categories */
    responses: {
      /** @description List of event categories */
      200: {
        content: {
          'application/json': components['schemas']['EventCategory'][];
        };
      };
    };
  };
  getEventsConfiguration: {
    /** @description Get events list with matchmaking and registered form by AccessToken user */
    responses: {
      /** @description List of event configuration */
      200: {
        content: {
          'application/json': components['schemas']['EventConfigurationList'][];
        };
      };
    };
  };
  getQuestionFilters: {
    /** @description Gets a list of questions filters */
    responses: {
      /** @description List of questions ordered */
      200: {
        content: {
          'application/json': components['schemas']['QuestionsFilters'];
        };
      };
    };
  };
  getQuestionFiltersResponses: {
    /** @description Gets responses to the filter questions from users attending the event */
    responses: {
      /** @description Responses to the filter questions from users attending the event */
      200: {
        content: {
          'application/json': components['schemas']['QuestionsFiltersResponses'];
        };
      };
    };
  };
  getEventSpeakers: {
    /** @description Get list of an event speakers */
    responses: {
      /** @description List of event speakers */
      200: {
        content: {
          'application/json': components['schemas']['SpeakersList'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
    };
  };
  GET_sessions: {
    /** @description Get list of a speakers's sessions */
    responses: {
      /** @description List of sessions of speakers */
      200: {
        content: {
          'application/json': unknown[];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
    };
  };
  addEventSpeaker: {
    /** @description Adds a speaker to an event */
    /** @description JSON Speaker */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSpeaker'];
      };
    };
    responses: {
      /** @description Speaker added */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSpeaker'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  updateEventSpeaker: {
    /** @description Update a speaker data */
    /** @description JSON Speaker */
    requestBody: {
      content: {
        'application/json': components['parameters']['translatableSpeaker'];
      };
    };
    responses: {
      /** @description Speaker updated */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['translatableSpeaker'];
          };
        };
      };
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  deleteEventSpeaker: {
    /** @description Delete a speaker */
    responses: {
      /** @description Speaker deleted */
      200: never;
      /** @description Invalid resource */
      400: {
        content: {
          'application/json': components['schemas']['errors400'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ApiError_Speakers403'];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
          'application/json': components['schemas']['errors404'];
        };
      };
    };
  };
  getOAuthAccessTokens: {
    /** @description Get OAuth access token */
    requestBody: components['parameters']['OAuthRequestBody'];
    responses: {
      /** @description OAuth tokens data */
      200: {
        content: {
          'application/json': components['schemas']['OAuthToken'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['OAuthError'];
        };
      };
    };
  };
}
